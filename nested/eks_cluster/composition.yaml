apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: compositeeks.aws.platformref.crossplane.io
  labels:
    provider: aws
spec:
  #writeConnectionSecretsToNamespace: upbound-system # TODO: Do we need this?
  compositeTypeRef:
    apiVersion: aws.platformref.crossplane.io/v1alpha1
    kind: CompositeEKS

  patchSets:
    - name: providerConfig
      patches:
        - fromFieldPath: spec.providerConfigName
          toFieldPath: spec.providerConfigRef.name

  resources:

    - base:
        apiVersion: eks.aws.crossplane.io/v1beta1
        kind: Cluster
        spec:
          forProvider:
            roleArnSelector:
              matchControllerRef: true
              matchLabels:
                role: controlplaneRole
            resourcesVpcConfig:
              endpointPrivateAccess: true
              endpointPublicAccess: true
      patches:

        - fromFieldPath: metadata.annotations[crossplane.io/external-name]
          toFieldPath: metadata.annotations[crossplane.io/external-name]

        # -------------------- ConnectionSecret -------------------- #
        - fromFieldPath: spec.id # Replaced: metadata.uid
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-secret"

        - fromFieldPath: spec.namespace
          toFieldPath: spec.writeConnectionSecretToRef.namespace
        # ---------------------------------------------------------- #

        - fromFieldPath: "spec.networkRef.id"
          toFieldPath: spec.forProvider.resourcesVpcConfig.subnetIdSelector.matchLabels[networks.aws.platformref.crossplane.io/network-id]

        - fromFieldPath: "spec.parameters.region"
          toFieldPath: spec.forProvider.region

        - fromFieldPath: "spec.parameters.version"
          toFieldPath: spec.forProvider.version

        # Take SG from VPC for now
        #- fromFieldPath: "spec.parameters.networkRef.id"
        #  toFieldPath: spec.forProvider.resourcesVpcConfig.securityGroupIdSelector.matchLabels[networks.aws.platformref.crossplane.io/network-id]

        - type: PatchSet
          patchSetName: providerConfig

      connectionDetails:
        - fromConnectionSecretKey: kubeconfig

    - base:
        apiVersion: identity.aws.crossplane.io/v1beta1
        kind: IAMRole
        metadata:
          labels:
            role: controlplaneRole
        spec:
          forProvider:
            assumeRolePolicyDocument: |
              {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "eks.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }
                ]
              }

      patches:
        - type: PatchSet
          patchSetName: providerConfig

    - base:
        apiVersion: identity.aws.crossplane.io/v1beta1
        kind: IAMRolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKSServicePolicy
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                role: controlplaneRole

      patches:
        - type: PatchSet
          patchSetName: providerConfig

    - base:
        apiVersion: identity.aws.crossplane.io/v1beta1
        kind: IAMRolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                role: controlplaneRole

      patches:
        - type: PatchSet
          patchSetName: providerConfig


    # ------------------------------------------------------------------ #
    # Use the parent spec.id and spec.namespace
    - base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: ProviderConfig
        spec:
          credentials:
            source: Secret
            secretRef:
              key: kubeconfig
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name

        - fromFieldPath: spec.id
          toFieldPath: spec.credentials.secretRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-secret" #Need to be identical to what we're creating in the eks cluster above

        - fromFieldPath: spec.namespace
          toFieldPath: spec.credentials.secretRef.namespace
        # This ProviderConfig uses the above EKS cluster's connection secret as
        # its credentials secret.

      readinessChecks:
        - type: None
    # ------------------------------------------------------------------ #